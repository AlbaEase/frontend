import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { connectWebSocket, disconnectWebSocket } from '../api/websocket';
import { Notification } from '../types/api';
import { checkAuthAndSetToken } from '../api/apiService';
import { getToken } from '../api/loginAxios';

// ÏïåÎ¶º Ïª®ÌÖçÏä§Ìä∏ ÌÉÄÏûÖ Ï†ïÏùò
interface WebSocketContextType {
  hasNewNotification: boolean;
  markNotificationsRead: () => void;
  lastNotification: Notification | null;
  isConnected: boolean;
  reconnect: () => void;
}

// Í∏∞Î≥∏Í∞í ÏÉùÏÑ±
const defaultContext: WebSocketContextType = {
  hasNewNotification: false,
  markNotificationsRead: () => {},
  lastNotification: null,
  isConnected: false,
  reconnect: () => {}
};

// Context ÏÉùÏÑ±
const WebSocketContext = createContext<WebSocketContextType>(defaultContext);

// Custom Hook
export const useWebSocket = () => useContext(WebSocketContext);

interface WebSocketProviderProps {
  children: ReactNode;
}

export const WebSocketProvider: React.FC<WebSocketProviderProps> = ({ children }) => {
  const [hasNewNotification, setHasNewNotification] = useState<boolean>(false);
  const [lastNotification, setLastNotification] = useState<Notification | null>(null);
  const [isConnected, setIsConnected] = useState<boolean>(false);
  const [reconnectTrigger, setReconnectTrigger] = useState<number>(0);

  // ÏõπÏÜåÏºì Ïó∞Í≤∞ Î∞è Ïû¨Ïó∞Í≤∞ Ìï®Ïàò
  const setupWebSocketConnection = () => {
    // Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏
    const isAuthenticated = checkAuthAndSetToken();
    if (!isAuthenticated) {
      console.warn("üö® Ïù∏Ï¶ùÎêòÏßÄ ÏïäÏùÄ ÏÇ¨Ïö©Ïûê: WebSocket Ïó∞Í≤∞ÏùÑ ÏãúÎèÑÌïòÏßÄ ÏïäÏäµÎãàÎã§.");
      return;
    }
    
    // getToken Ìï®ÏàòÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Ïú†Ìö®Ìïú ÌÜ†ÌÅ∞ ÌöçÎìù
    const token = getToken();
    if (!token) {
      console.warn("üö® ÌÜ†ÌÅ∞Ïù¥ ÏóÜÍ±∞ÎÇò Ïú†Ìö®ÌïòÏßÄ ÏïäÏïÑ WebSocket Ïó∞Í≤∞ÏùÑ ÏãúÎèÑÌïòÏßÄ ÏïäÏäµÎãàÎã§.");
      return;
    }

    console.log("‚úÖ WebSocket Ïó∞Í≤∞ ÏãúÎèÑ Ï§ë...");
    
    // Í∏∞Ï°¥ Ïó∞Í≤∞ Ï†ïÎ¶¨
    disconnectWebSocket();
    
    // ÏõπÏÜåÏºì Ïó∞Í≤∞
    connectWebSocket(token, {
      onConnect: () => {
        console.log('WebSocket connected in context');
        setIsConnected(true);
      },
      onNotification: (data) => {
        console.log('New notification received:', data);
        setHasNewNotification(true);
        
        try {
          // ÏÑúÎ≤ÑÏóêÏÑú Î∞õÏùÄ ÏïåÎ¶º Îç∞Ïù¥ÌÑ∞Î•º Notification ÌÉÄÏûÖÏúºÎ°ú ÏïàÏ†ÑÌïòÍ≤å, ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÌÇ§ Î≥ÄÌôò
          const notification: Notification = {
            id: typeof data.id === 'number' ? data.id : 0,
            userId: typeof data.userId === 'number' ? data.userId : 0,
            type: (data.type as string) === 'ALL_USERS' ? 'ALL_USERS' : 'SPECIFIC_USER',
            message: typeof data.message === 'string' ? data.message : '',
            readStatus: (data.readStatus as string) === 'READ' ? 'READ' : 'UNREAD',
            createdAt: typeof data.createdAt === 'string' ? data.createdAt : new Date().toISOString(),
            scheduleId: typeof data.scheduleId === 'number' ? data.scheduleId : undefined,
            details: typeof data.details === 'string' ? data.details : undefined
          };
          
          setLastNotification(notification);
        } catch (error) {
          console.error('ÏïåÎ¶º Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò:', error);
          console.error('ÏõêÎ≥∏ Îç∞Ïù¥ÌÑ∞:', data);
        }
      },
      onError: (error) => {
        console.error('WebSocket error:', error);
        setIsConnected(false);
      },
      onDisconnect: () => {
        console.log('WebSocket disconnected');
        setIsConnected(false);
      }
    });
  };

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ ÎòêÎäî Ïû¨Ïó∞Í≤∞ Ìä∏Î¶¨Í±∞Í∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ ÏõπÏÜåÏºì Ïó∞Í≤∞ ÏÑ§Ï†ï
  useEffect(() => {
    setupWebSocketConnection();

    // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú ÏõπÏÜåÏºì Ïó∞Í≤∞ Ìï¥Ï†ú
    return () => {
      console.log("üîå WebSocket Ïó∞Í≤∞ Ìï¥Ï†ú Ï§ë...");
      disconnectWebSocket();
      setIsConnected(false);
    };
  }, [reconnectTrigger]);
  
  // ÌÜ†ÌÅ∞ Î≥ÄÍ≤Ω Ïù¥Î≤§Ìä∏ Í∞êÏßÄ
  useEffect(() => {
    const handleStorageChange = (event: StorageEvent) => {
      if (event.key === 'accessToken') {
        console.log('ÌÜ†ÌÅ∞Ïù¥ Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§. WebSocket Ïû¨Ïó∞Í≤∞ÏùÑ ÏãúÎèÑÌï©ÎãàÎã§.');
        setupWebSocketConnection();
      }
    };
    
    window.addEventListener('storage', handleStorageChange);
    
    return () => {
      window.removeEventListener('storage', handleStorageChange);
    };
  }, []);

  // Ïû¨Ïó∞Í≤∞ Ìï®Ïàò
  const reconnect = () => {
    console.log('WebSocket Ïû¨Ïó∞Í≤∞ ÏöîÏ≤≠...');
    setReconnectTrigger(prev => prev + 1);
  };

  // ÏïåÎ¶ºÏùÑ ÏùΩÏùå ÏÉÅÌÉúÎ°ú ÌëúÏãú
  const markNotificationsRead = () => {
    setHasNewNotification(false);
  };

  // Context Í∞í Ï†ïÏùò
  const contextValue: WebSocketContextType = {
    hasNewNotification,
    markNotificationsRead,
    lastNotification,
    isConnected,
    reconnect
  };

  return (
    <WebSocketContext.Provider value={contextValue}>
      {children}
    </WebSocketContext.Provider>
  );
};

export default WebSocketContext; 